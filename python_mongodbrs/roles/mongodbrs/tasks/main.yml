---
- name: Create MongoDB Security Group
  ec2_group:
    name: "mongodb-{{ app_name }}-{{ app_env }}-sg"
    description: "Security Group MongoDB {{ app_env }}"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: 27017
        to_port: 27017
        cidr_ip: "{{ private_network }}"
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: "{{ private_network }}"
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
  register: security_group_mongodb

- name: Tagging MongoDB SG
  ec2_tag:
    region: "{{ region }}"
    resource: "{{ security_group_mongodb.group_id }}"
    tags:
      Name: "{{ tags_mongodb.Name }}"
      environment: "{{ app_env }}"

- name: Create Route53 internal zone for mongodb instances
  route53_zone: zone={{ app_env }}.{{ domain | default('mycompany.com') }} state="present" vpc_region="{{ region }}" vpc_id="{{ vpc_id }}" comment="{{ app_env }} internal domain"
  register: r53_zone

# Master MongoDB Instance
- name: Create MongoDB Instance
  ec2:
    region: "{{ region }}"
    instance_type: "{{ mongodb_instance_type }}"
    key_name: "{{ key_name }}"
    group_id: "{{ security_group_mongodb.group_id }}"
    image: "{{ image_id }}"
    vpc_subnet_id: "{{ subnets_ids.subnet1 }}"
    wait: yes
    user_data: "{{ lookup('template', 'templates/user_data/launcher.sh.j2') }}"
    assign_public_ip: yes
    exact_count: 1
    count_tag:
      Name: "mongodb-{{ app_name }}-{{ app_env }}-member1"
    instance_tags:
      Name: "mongodb-{{ app_name }}-{{ app_env }}-member1"
      environment: "{{ app_env }}"
  register: ec2_mongodb1

- name: Create Record Set on Route53 to MongoDB Instance
  route53:
    command: create
    overwrite: yes
    hosted_zone_id: "{{ r53_zone.set.zone_id }}"
    zone: "{{ r53_zone.set.name }}"
    record: "mongodb-{{ app_name }}-{{ app_env }}-member1.{{ app_env }}.{{ domain | default('mycompany.com') }}"
    type: A
    ttl: 300
    value: "{{ item.private_ip }}"
    private_zone: yes
  with_items: ec2_mongodb1.tagged_instances
# End First MongoDB instance

- name: EC2 Remote Facts
  ec2_remote_facts:
    region: "{{ region }}"
    filters:
      instance-id: "{{ ec2_mongodb1.tagged_instances.0.id }}"
  register: facts_ec2

- name: Add instance created to group
  add_host: name="{{ ec2_mongodb1.tagged_instances.0.public_ip }}" groups=launched_master

- name: Wait for ssh to come up
  local_action: wait_for host="{{ ec2_mongodb1.tagged_instances.0.public_ip }}" port=22 timeout=320 state=started

# Second MongoDB Instance
- name: Create MongoDB Instance
  ec2:
    region: "{{ region }}"
    instance_type: "{{ mongodb_instance_type }}"
    key_name: "{{ key_name }}"
    group_id: "{{ security_group_mongodb.group_id }}"
    image: "{{ image_id }}"
    vpc_subnet_id: "{{ subnets_ids.subnet3 }}"
    wait: yes
    user_data: "{{ lookup('template', 'templates/user_data/launcher.sh.j2') }}"
    assign_public_ip: yes
    exact_count: 1
    count_tag:
      Name: "mongodb-{{ app_name }}-{{ app_env }}-member2"
    instance_tags:
      Name: "mongodb-{{ app_name }}-{{ app_env }}-member2"
      environment: "{{ app_env }}"
  register: ec2_mongodb2

- name: Create Record Set on Route53 to MongoDB Instance
  route53:
    command: create
    overwrite: yes
    hosted_zone_id: "{{ r53_zone.set.zone_id }}"
    zone: "{{ r53_zone.set.name }}"
    record: "mongodb-{{ app_name }}-{{ app_env }}-member2.{{ app_env }}.{{ domain | default('mycompany.com') }}"
    type: A
    ttl: 300
    value: "{{ item.private_ip }}"
    private_zone: yes
  with_items: ec2_mongodb2.tagged_instances
# End Second MongoDB instance

# Third MongoDB Instance
- name: Create MongoDB Instance
  ec2:
    region: "{{ region }}"
    instance_type: "{{ mongodb_instance_type }}"
    key_name: "{{ key_name }}"
    group_id: "{{ security_group_mongodb.group_id }}"
    image: "{{ image_id }}"
    vpc_subnet_id: "{{ subnets_ids.subnet3 }}"
    wait: yes
    user_data: "{{ lookup('template', 'templates/user_data/launcher.sh.j2') }}"
    assign_public_ip: yes
    exact_count: 1
    count_tag:
      Name: "mongodb-{{ app_name }}-{{ app_env }}-member3"
    instance_tags:
      Name: "mongodb-{{ app_name }}-{{ app_env }}-member3"
      environment: "{{ app_env }}"
  register: ec2_mongodb3

- name: Create Record Set on Route53 to MongoDB Instance
  route53:
    command: create
    overwrite: yes
    hosted_zone_id: "{{ r53_zone.set.zone_id }}"
    zone: "{{ r53_zone.set.name }}"
    record: "mongodb-{{ app_name }}-{{ app_env }}-member3.{{ app_env }}.{{ domain | default('mycompany.com') }}"
    type: A
    ttl: 300
    value: "{{ item.private_ip }}"
    private_zone: yes
  with_items: ec2_mongodb3.tagged_instances
# End Third MongoDB Instance

- name: Add Second Created Instance to Ansible Groupname
  add_host: name="{{ ec2_mongodb2.tagged_instances.0.public_ip }}" groups=launched_slaves

- name: Add Third Created Instance to Ansible Groupname
  add_host: name="{{ ec2_mongodb3.tagged_instances.0.public_ip}}" groups=launched_slaves

- name: Wait for ssh to come up
  local_action: wait_for host="{{ ec2_mongodb2.tagged_instances.0.public_ip }}" port=22 timeout=320 state=started

- name: Wait for ssh to come up
  local_action: wait_for host="{{ ec2_mongodb3.tagged_instances.0.public_ip }}" port=22 timeout=320 state=started
